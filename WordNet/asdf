See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 11 warnings)

Correctness:  19/36 tests passed
Memory:       4/4 tests passed
Timing:       14/14 tests passed

Aggregate score: 71.67%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 183 Apr 20 17:04 Outcast.java
3.4K Apr 20 17:04 SAP.java
3.1K Apr 20 17:04 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 SAP.java
*-----------------------------------------------------------

% javac11 WordNet.java
*-----------------------------------------------------------

% javac11 Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M P DM_STRING_VOID_CTOR Dm: Creates the empty string using 'new String()'. Use the string literal "" instead.  At Outcast.java:[line 9]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'test' but that value is never used.  At WordNet.java:[line 98]
H C GC_UNRELATED_TYPES GC: Calls a generic collection method with an argument of type 'String' that is incompatible with the expected argument type 'edu.princeton.cs.algs4.SET<java.lang.Integer>'.  At WordNet.java:[line 34]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:3: Avoid unused parameter variables, such as 'wordnet'. [UnusedFormalParameter]
Outcast.java:13: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
SAP.java:14: The private instance (or static) variable 'digraph' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:14: The private instance (or static) variable 'nouns' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:15: The private instance (or static) variable 'synsets' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:16: The private instance (or static) variable 'sap' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:98: Avoid unused local variables, such as 'test'. [UnusedLocalVariable]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:3:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] SAP.java:3:8: Unused import statement for 'edu.princeton.cs.algs4.DepthFirstDirectedPaths'. [UnusedImports]
[WARN] SAP.java:14:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] SAP.java:58:60: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] WordNet.java:6:8: Unused import statement for 'edu.princeton.cs.algs4.Queue'. [UnusedImports]
[WARN] WordNet.java:7:8: Unused import statement for 'edu.princeton.cs.algs4.BreadthFirstDirectedPaths'. [UnusedImports]
[WARN] WordNet.java:8:8: Unused import statement for 'edu.princeton.cs.algs4.DepthFirstDirectedPaths'. [UnusedImports]
[WARN] WordNet.java:10:1: Duplicate import statement for 'edu.princeton.cs.algs4.SET'. [RedundantImport]
[WARN] WordNet.java:14:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] WordNet.java:31:13: 'while' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 10 warnings.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------
[INFO] SAP.java:37:17: You will probably not achieve the performance requirement if you use the 'SET' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:71:17: You will probably not achieve the performance requirement if you use the 'SET' data type in this program. Consider using a hash table instead of a BST. [Performance]
[WARN] SAP.java:1: In addition to the 5 required methods, you should define at least one private helper method to avoid code duplication. [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
==> passed

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
==> passed

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> passed

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
  * G = digraph1.txt v = 0, w = -1
  * G = digraph1.txt v = 13, w = 0
  * G = digraph1.txt v = 0, w = 13
==> passed

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = null
  * G = digraph1.txt, v = null, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = null, w = null
  * G = digraph1.txt, v = { 0, 7, 9, 12, -1 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, -1, 4, 5, 10 }
  * G = digraph1.txt, v = { 13, 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 13, 10 }
  * G = digraph1.txt, v = { 0, null, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, null, 5, 10 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

==> FAILED

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
==> passed


Total: 19/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.



Total: 0/14 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast4.txt
    - nouns = [probability, statistics, mathematics, physics]
    - student   outcast() = 
    - reference outcast() = probability

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8a.txt
    - nouns = [Banti's_disease, hyperadrenalism, German_measles, gargoylism, Q_fever, amebiosis, anthrax, playboy]
    - student   outcast() = 
    - reference outcast() = playboy

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9a.txt
    - nouns = [hair, eyes, arm, mouth, nose, ear, cheek, brow, chin]
    - student   outcast() = 
    - reference outcast() = eyes

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast10a.txt
    - nouns = [blue, green, yellow, brown, black, white, orange, violet, red, serendipity]
    - student   outcast() = 
    - reference outcast() = serendipity

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

  * outcast12.txt
    - nouns = [Dylan, folk, Guthrie, idol, Minneapolis, music, musical, playing, public, recognition, review, thunderbird]
    - student   outcast() = 
    - reference outcast() = Minneapolis

  * outcast12a.txt
    - nouns = [competition, cup, event, fielding, football, level, practice, prestige, team, tournament, world, mongoose]
    - student   outcast() = 
    - reference outcast() = mongoose

  * outcast17.txt
    - nouns = [art, canvas, china, culture, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast20.txt
    - nouns = [art, Buddha, Buddhism, canvas, china, culture, India, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast29.txt
    - nouns = [acorn, application, assembly, award, basic, cad, code, computer, custom, depth, development, finish, hardware, instruction, language, machine, model, operation, processor, project, silicon, simulation, software, speed, support, team, technology, test, mosque]
    - student   outcast() = 
    - reference outcast() = acorn

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8347968 bytes
reference   memory    = 10320408 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 840704 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.6
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 4073536 bytes
    - reference memory              = 7042792 bytes
    - student / reference ratio     = 0.6
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 9740160 bytes
    - reference memory              = 16173208 bytes
    - student / reference ratio     = 0.6
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.02 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  996537.00
     -  student   solution calls per second:    1616.00
     -  reference / student ratio:               616.67

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  305308.00
     -  student   solution calls per second:    1567.00
     -  reference / student ratio:               194.84

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   19603.00
     -  student   solution calls per second:     489.00
     -  reference / student ratio:                40.09

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
         16384     0.07
         32768     0.12
         65536     0.39
==> passed


Total: 14/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)