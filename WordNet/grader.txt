Discussions
Upload Files and Submit
To upload a file, click the part below. Then, submit the files. You can submit as many times as you like. You do not need to upload all parts in order to submit.


Your Submissions
Date
Score
Passed?

April 19, 2020 7:14 AM MSKSubmitted at: Apr 19, 7:14 AM MSK
47/100Score: 47 of 100
NoAssignment not passed
WordNet
Filename: WordNet
47/100Score: 47 of 100
Hide grader output
Grader output
See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  4/36 tests passed
Memory:       4/4 tests passed
Timing:       28/27 tests passed

Aggregate score: 47.41%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 183 Apr 19 04:14 Outcast.java
 409 Apr 19 04:14 SAP.java
2.9K Apr 19 04:14 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 SAP.java
*-----------------------------------------------------------

% javac11 WordNet.java
*-----------------------------------------------------------

% javac11 Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M P DM_STRING_VOID_CTOR Dm: Creates the empty string using 'new String()'. Use the string literal "" instead.  At Outcast.java:[line 9]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'test' but that value is never used.  At WordNet.java:[line 102]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:3: Avoid unused parameter variables, such as 'wordnet'. [UnusedFormalParameter]
Outcast.java:13: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
SAP.java:6: Avoid unused parameter variables, such as 'G'. [UnusedFormalParameter]
SAP.java:32: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
WordNet.java:12: The private instance (or static) variable 'nouns' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:13: The private instance (or static) variable 'synsets' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:14: The private instance (or static) variable 'connections' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:102: Avoid unused local variables, such as 'test'. [UnusedLocalVariable]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:3:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] SAP.java:6:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] SAP.java:21:60: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] WordNet.java:1:8: Unused import statement for 'edu.princeton.cs.algs4.SET'. [UnusedImports]
[WARN] WordNet.java:12:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] WordNet.java:28:13: 'while' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------
[WARN] SAP.java:1: In addition to the 5 required methods, you should define at least one private helper method to avoid code duplication. [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
     ancestor() inconsistent with length()
    - failed on trial 1 of 169
    - v = 3, w = 3
    - student   length   = 0
    - distance from 3 to 0 = 2
    - distance from 3 to 0 = 2
    - student   ancestor = 0
    - reference length   = 0
    - reference ancestor = 3

  * digraph2.txt
    - failed on trial 1 of 36
    - v = 2, w = 0
    - student   length() = 0
    - reference length() = 4

  * digraph3.txt
    - failed on trial 1 of 225
    - v = 7, w = 11
    - student   length() = 0
    - reference length() = 3

  * digraph4.txt
    - failed on trial 1 of 100
    - v = 0, w = 8
    - student   length() = 0
    - reference length() = 1

  * digraph5.txt
    - failed on trial 1 of 484
    - v = 4, w = 17
    - student   length() = 0
    - reference length() = -1

  * digraph6.txt
    - failed on trial 1 of 64
    - v = 1, w = 0
    - student   length() = 0
    - reference length() = 1

  * digraph9.txt
    - failed on trial 1 of 81
    - v = 4, w = 1
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 757, w = 63713
    - student   length() = 0
    - reference length() = 17

==> FAILED

Test 3: check length() and ancestor() on directed paths
  * 5
    - failed on trial 1 of 25
    - v = 2, w = 4
    - student   length() = 0
    - reference length() = 4

  * 10
    - failed on trial 1 of 100
    - v = 0, w = 6
    - student   length() = 0
    - reference length() = 3

  * 20
    - failed on trial 1 of 400
    - v = 8, w = 0
    - student   length() = 0
    - reference length() = 3

  * 50
    - failed on trial 1 of 2500
    - v = 8, w = 18
    - student   length() = 0
    - reference length() = 5

  * 100
    - failed on trial 1 of 10000
    - v = 32, w = 20
    - student   length() = 0
    - reference length() = 4

==> FAILED

Test 4: check length() and ancestor() on directed cycles
  * 5
    - failed on trial 1 of 25
    - v = 3, w = 2
    - student   length() = 0
    - reference length() = 2

  * 10
    - failed on trial 1 of 100
    - v = 1, w = 2
    - student   length() = 0
    - reference length() = 2

  * 20
    - failed on trial 1 of 400
    - v = 3, w = 2
    - student   length() = 0
    - reference length() = 3

  * 50
    - failed on trial 1 of 2500
    - v = 41, w = 28
    - student   length() = 0
    - reference length() = 6

  * 100
    - failed on trial 1 of 10000
    - v = 90, w = 84
    - student   length() = 0
    - reference length() = 27

==> FAILED

Test 5: check length() and ancestor() on complete graphs
  * 5
    - failed on trial 1 of 25
    - v = 0, w = 4
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 8, w = 1
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 7, w = 19
    - student   length() = 0
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 15, w = 17
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 6: check length() and ancestor() on tournament digraphs
  * 5
    - failed on trial 1 of 25
    - v = 2, w = 4
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 9, w = 2
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 14, w = 8
    - student   length() = 0
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 42, w = 36
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 7: check length() and ancestor() on complete binary trees
  * 5
    - failed on trial 1 of 25
    - v = 0, w = 4
    - student   length() = 0
    - reference length() = 2

  * 10
    - failed on trial 1 of 100
    - v = 8, w = 9
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 16, w = 14
    - student   length() = 0
    - reference length() = 2

  * 50
    - failed on trial 1 of 2500
    - v = 10, w = 43
    - student   length() = 0
    - reference length() = 9

  * 100
    - failed on trial 1 of 10000
    - v = 9, w = 76
    - student   length() = 0
    - reference length() = 2

==> FAILED

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 0, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 4, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 8, w = 4
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 3, w = 0
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 3, w = 8
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 0, w = 15
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
     ancestor() inconsistent with length()
    - failed on trial 1 of 25
    - v = 1, w = 1
    - student   length   = 0
    - distance from 1 to 0 = 2
    - distance from 1 to 0 = 2
    - student   ancestor = 0
    - reference length   = 0
    - reference ancestor = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 2, w = 3
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 13, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
    - failed on trial 1 of 25
    - v = 2, w = 3
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices
    - failed on trial 1 of 100
    - v = 6, w = 5
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 1 of 400
    - v = 1, w = 6
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
    - failed on trial 1 of 25
    - v = 0, w = 4
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 10 vertices
     No path from v or w to ancestor
    - failed on trial 1 of 100
    - v = 5, w = 5
    - student   length   = 0
    - reference length   = 0
    - student   ancestor = 0
    - reference ancestor = 5

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 1 of 400
    - v = 19, w = 4
    - student   length() = 0
    - reference length() = -1

    - failed on trial 1 of 100

==> FAILED

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 4, w = 2
    - student   length() = 0
    - reference length() = 3

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 3, w = 4
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 4, w = 1
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
    - v = 0, w = 1
    - (digraph1.txt) student   length() = 0
    - (digraph1.txt) reference length() = 1

  * digraph3.txt and digraph4.txt
    - v = 0, w = 1
    - (digraph3.txt) student   length() = 0
    - (digraph3.txt) reference length() = -1

  * digraph5.txt and digraph6.txt
    - v = 0, w = 1
    - (digraph5.txt) student   length() = 0
    - (digraph5.txt) reference length() = -1

  * digraph2.txt and digraph1.txt
    - v = 0, w = 1
    - (digraph2.txt) student   length() = 0
    - (digraph2.txt) reference length() = 1

==> FAILED

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 912 }
    - w = { 2616 }
    - student   length() = 0
    - reference length() = 15

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 16887 }
    - w = { 19323, 39509 }
    - student   length() = 0
    - reference length() = 13

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 22479, 23098 }
    - w = { 35267 }
    - student   length() = 0
    - reference length() = 13

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 27387, 70743 }
    - w = { 3432, 51330 }
    - student   length() = 0
    - reference length() = 14

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 22798, 26482, 55166 }
    - w = { 24679, 26185, 30822, 35285, 36797, 37943, 60644, 64071, 67390, 71640, 73602 }
    - student   length() = 0
    - reference length() = 6

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 9373, 9496, 12863, 15769, 25019, 34256, 34960, 57923, 58362, 60972, 73075 }
    - w = { 23348, 43003, 44425 }
    - student   length() = 0
    - reference length() = 7

==> FAILED

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { }
    - w = { 14213, 42514, 46917, 60216, 75641 }
    - student   length() = 0
    - reference length() = -1

  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 19094, 21590, 32303, 43908, 51422 }
    - w = { }
    - student   length() = 0
    - reference length() = -1

  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { }
    - w = { }
    - student   length() = 0
    - reference length() = -1

==> FAILED

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
    - fails to throw an exception when calling length() with an invalid argument

    - fails to throw an exception when calling ancestor() with an invalid argument

  * G = digraph1.txt v = 0, w = -1
    - fails to throw an exception when calling length() with an invalid argument

    - fails to throw an exception when calling ancestor() with an invalid argument

  * G = digraph1.txt v = 13, w = 0
    - fails to throw an exception when calling length() with an invalid argument

    - fails to throw an exception when calling ancestor() with an invalid argument

  * G = digraph1.txt v = 0, w = 13
    - fails to throw an exception when calling length() with an invalid argument

    - fails to throw an exception when calling ancestor() with an invalid argument

==> FAILED

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 10, 11 }, w = null
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = null, w = { 1, 2, 3, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = null, w = null
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, -1, 11 }, w = { 1, 2, 3, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, 11 }, w = { 1, 2, 3, 4, 6, -1, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, 11, 13 }, w = { 1, 2, 3, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, 11 }, w = { 1, 2, 3, 13, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, null, 11 }, w = { 1, 2, 3, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 10, 11 }, w = { 1, 2, null, 3, 4, 6, 9 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

==> FAILED

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - no path from v or w to ancestor
    - failed on call 1 to ancestor()
    - v = 6, w = 18
    - reference length   = 2
    - student   ancestor = 0
    - reference ancestor = 18

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 1 to ancestor()
    - v = 17, w = 10
    - student   ancestor = 0
    - distance from 17 to 0 = 2
    - distance from 10 to 0 = 2
    - reference ancestor = 10
    - reference length   = 2

==> FAILED


Total: 1/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 1 of 1000
    - nounA = rhino
    - nounB = Sebastopol
    - student   distance() = -2
    - reference distance() = 18

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
0 -> 1 -> 
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
1 -> 0 -> 
    - failed on pair 15
    - nounA = b
    - nounB = a
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
1 -> 2 -> 3 -> 4 -> 5 -> 0 -> 
    - failed on pair 6
    - nounA = b
    - nounB = a
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
0 -> 1 -> 
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
1 -> 0 -> 
    - failed on pair 8
    - nounA = b
    - nounB = a
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
0 -> 1 -> 
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
0 -> 1 -> 
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 2147483647
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
0 -> 1 -> 
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 2147483647
    - reference distance() = 1

==> FAILED

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = alpha_globulin
    - nounB = recombinant_protein
    - student   distance() = -2
    - reference distance() = 4

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = sliver
    - nounB = oligosaccharide
    - student   distance() = -2
    - reference distance() = 8

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = vascular_system
    - nounB = thiamine_pyrophosphate
    - student   distance() = -2
    - reference distance() = 8

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 1000
    - nounA = upstager
    - nounB = Steuben
    - student   sap() = ''hood'
    - reference sap() = 'person individual someone somebody mortal soul'
    - student   distance() = -2
    - reference distance() to 'person individual someone somebody mortal soul' = 8
    - ''hood' is not a common ancestor of 'upstager' and 'Steuben'

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
0 -> 
0 -> 
0 -> 1 -> 
0 -> 1 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 2 of 15
    - nounA = a
    - nounB = b
    - student   sap() = 'a'
    - reference sap() = 'b'
    - student   distance() = 2147483647
    - reference distance() to 'b' = 1
    - 'a' is not a common ancestor of 'a' and 'b'

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
0 -> 
0 -> 
1 -> 0 -> 
1 -> 0 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 16 of 15
    - nounA = b
    - nounB = a
    - student   sap() = 'b'
    - reference sap() = 'a'
    - student   distance() = 2147483647
    - reference distance() to 'a' = 1
    - 'b' is not a common ancestor of 'b' and 'a'

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
0 -> 
0 -> 
1 -> 2 -> 3 -> 4 -> 5 -> 0 -> 
1 -> 2 -> 3 -> 4 -> 5 -> 0 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 7 of 6
    - nounA = b
    - nounB = a
    - student   sap() = 'b'
    - reference sap() = 'a'
    - student   distance() = 2147483647
    - reference distance() to 'a' = 1
    - 'b' is not a common ancestor of 'b' and 'a'

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
0 -> 
0 -> 
0 -> 1 -> 
0 -> 1 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 2 of 11
    - nounA = a
    - nounB = b
    - student   sap() = 'a'
    - reference sap() = 'b'
    - student   distance() = 2147483647
    - reference distance() to 'b' = 1
    - 'a' is not a common ancestor of 'a' and 'b'

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
0 -> 
0 -> 
1 -> 0 -> 
1 -> 0 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 9 of 8
    - nounA = b
    - nounB = a
    - student   sap() = 'b'
    - reference sap() = 'a'
    - student   distance() = 2147483647
    - reference distance() to 'a' = 1
    - 'b' is not a common ancestor of 'b' and 'a'

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
0 -> 
0 -> 
0 -> 1 -> 
0 -> 1 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 2 of 8
    - nounA = a
    - nounB = b
    - student   sap() = 'a'
    - reference sap() = 'b'
    - student   distance() = 2147483647
    - reference distance() to 'b' = 1
    - 'a' is not a common ancestor of 'a' and 'b'

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
0 -> 
0 -> 
0 -> 1 -> 
0 -> 1 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 2 of 11
    - nounA = a
    - nounB = b
    - student   sap() = 'a'
    - reference sap() = 'b'
    - student   distance() = 2147483647
    - reference distance() to 'b' = 1
    - 'a' is not a common ancestor of 'a' and 'b'

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
0 -> 
0 -> 
0 -> 1 -> 
0 -> 1 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 2 of 8
    - nounA = a
    - nounB = b
    - student   sap() = 'a'
    - reference sap() = 'b'
    - student   distance() = 2147483647
    - reference distance() to 'b' = 1
    - 'a' is not a common ancestor of 'a' and 'b'

==> FAILED

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
28 -> 76 -> 60 -> 44 -> 
28 -> 76 -> 60 -> 44 -> 
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 1000
    - nounA = glutelin
    - nounB = supermolecule
    - student   sap() = 'glutelin'
    - reference sap() = 'macromolecule supermolecule'
    - student   distance() = 2147483647
    - reference distance() to 'macromolecule supermolecule' = 3
    - 'glutelin' is not a common ancestor of 'glutelin' and 'supermolecule'

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 1000
    - nounA = gelatine
    - nounB = stub
    - student   sap() = 'ABO_antibodies'
    - reference sap() = 'thing'
    - student   distance() = -2
    - reference distance() to 'thing' = 9
    - 'ABO_antibodies' is not a common ancestor of 'gelatine' and 'stub'

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 1000
    - nounA = corner
    - nounB = NAD
    - student   sap() = 'ABO_antibodies'
    - reference sap() = 'thing'
    - student   distance() = -2
    - reference distance() to 'thing' = 6
    - 'ABO_antibodies' is not a common ancestor of 'corner' and 'NAD'

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on noun 28


    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of primitive operations in Digraph exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==> passed

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
    - distance("x", "b") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "b") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
    - distance("b", "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("b", "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
    - distance("x", "a") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "a") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
    - distance("x", "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
    - distance("a", null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("a", null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
    - distance(null, "a") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, "a") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
    - distance(null, null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
    - distance("x", null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", null) throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
    - distance(null, "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, "x") throws wrong exception
    - it throws a java.lang.NullPointerException
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
    - isNoun(null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 1 to distance()
    - nounA = pride
    - nounB = mercury_barometer
    - student   distance() = -2
    - reference distance() = 14

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 100
    - nounA = lymphokine
    - nounB = bioscience
    - student   sap() = ''hood'
    - reference sap() = 'entity'
    - student   distance() = -2
    - reference distance() to 'entity' = 17
    - ''hood' is not a common ancestor of 'lymphokine' and 'bioscience'

    - failed on call 1 to sap()
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 100
    - nounA = Thiry
    - nounB = twenties
    - student   sap() = ''hood'
    - reference sap() = 'entity'
    - student   distance() = -2
    - reference distance() to 'entity' = 13
    - ''hood' is not a common ancestor of 'Thiry' and 'twenties'

    - failed on call 1 to sap()
  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 100
    - nounA = halogeton
    - nounB = Henry_VI
    - student   sap() = ''hood'
    - reference sap() = 'organism being'
    - student   distance() = -2
    - reference distance() to 'organism being' = 10
    - ''hood' is not a common ancestor of 'halogeton' and 'Henry_VI'

    - failed on call 1 to sap()
==> FAILED


Total: 3/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast4.txt
    - nouns = [probability, statistics, mathematics, physics]
    - student   outcast() = 
    - reference outcast() = probability

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8a.txt
    - nouns = [Banti's_disease, hyperadrenalism, German_measles, gargoylism, Q_fever, amebiosis, anthrax, playboy]
    - student   outcast() = 
    - reference outcast() = playboy

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9a.txt
    - nouns = [hair, eyes, arm, mouth, nose, ear, cheek, brow, chin]
    - student   outcast() = 
    - reference outcast() = eyes

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast10a.txt
    - nouns = [blue, green, yellow, brown, black, white, orange, violet, red, serendipity]
    - student   outcast() = 
    - reference outcast() = serendipity

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

  * outcast12.txt
    - nouns = [Dylan, folk, Guthrie, idol, Minneapolis, music, musical, playing, public, recognition, review, thunderbird]
    - student   outcast() = 
    - reference outcast() = Minneapolis

  * outcast12a.txt
    - nouns = [competition, cup, event, fielding, football, level, practice, prestige, team, tournament, world, mongoose]
    - student   outcast() = 
    - reference outcast() = mongoose

  * outcast17.txt
    - nouns = [art, canvas, china, culture, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast20.txt
    - nouns = [art, Buddha, Buddhism, canvas, china, culture, India, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast29.txt
    - nouns = [acorn, application, assembly, award, basic, cad, code, computer, custom, depth, development, finish, hardware, instruction, language, machine, model, operation, processor, project, silicon, simulation, software, speed, support, team, technology, test, mosque]
    - student   outcast() = 
    - reference outcast() = acorn

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 16 bytes
reference   memory    = 10320616 bytes
ratio                 = 0.00
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 521176 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 2539800 bytes
    - reference memory              = 7042504 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 5977472 bytes
    - reference memory              = 16172672 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.00 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second: 1265723.00
     -  student   solution calls per second: 3718913.00
     -  reference / student ratio:                 0.34

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> BONUS       student <=   100x reference
=> BONUS       student <=    10x reference
=> BONUS       student <=     2x reference
=> BONUS       student <=   0.5x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  362293.00
     -  student   solution calls per second: 2251908.00
     -  reference / student ratio:                 0.16

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=    10x reference
=> BONUS       student <=     2x reference
=> BONUS       student <=   0.5x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   23574.00
     -  student   solution calls per second:  110855.00
     -  reference / student ratio:                 0.21

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=     2x reference
=> BONUS       student <=   0.5x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
==> passed


Total: 23/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
==> passed

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 0
    - minimum required   = 1
    - maximum allowed    = 1

  * calls to length()    = 0
    - minimum required   = 3
    - maximum allowed    = 6

  * calls to ancestor()  = 0
    - minimum required   = 3
    - maximum allowed    = 6

==> FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 1
  * calls to addEdge()   = 84505
  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of primitive operations in Digraph exceeds limit: 2000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.23 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  357787.75
    - student   solution calls per second:      19.25
    - reference / student ratio:             18586.38

=> FAILED    student <= 10000x reference
=> FAILED    student <=  1000x reference
=> FAILED    student <=   100x reference
=> FAILED    student <=    10x reference
=> FAILED    student <=     5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second: 1359645.00
    - student   solution calls per second: 1209272.00
    - reference / student ratio:                 1.12
    - allowed ratio:                             4.00
==> passed

Total: 4/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 6
    - maximum allowed             = 16

 * outcast10.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 45
    - maximum allowed             = 100

 * outcast29.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 406
    - maximum allowed             = 841

==> FAILED

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.00

Total elapsed time: 0.00 seconds

==> passed


Total: 1/2 tests passed!


================================================================



k
